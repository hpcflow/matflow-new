name: release
concurrency: release

env:
  PYTHON_VERSION_BUMP: 3.9
  PYTHON_VERSION_BUILD_EXES: 3.9
  PYTHON_VERSION_RELEASE: 3.9
  PYTHON_VERSION_BUILD_DOCS: 3.9
  PYTHON_VERSION_UPDATE_WEB: 3.9

on:
  pull_request_target:
    branches: [main, develop]
    types: [closed]

jobs:
  bump-version:
    if:
      | # skip if: PR is closed without merging; '[skip release]' is in the PR title; or if merging any branch other than pre_release_branch into release_branch
      (
        github.event.pull_request.merged
        && ! contains(github.event.pull_request.title, '[skip release]')
        && (
          github.event.pull_request.base.ref == 'develop' || (
            github.event.pull_request.base.ref == 'main'
            && github.event.pull_request.head.ref == 'develop'
          )
        )
      )
    runs-on: ubuntu-latest
    outputs:
      new_tag_name: ${{ steps.get_new_tag.outputs.new_tag_name }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # get all history and tags
          ref: ${{ github.event.pull_request.base.ref }}
          token: ${{ secrets.HPCFLOW_ACTIONS_TOKEN }}

      - run: |
          git config user.name hpcflow-actions
          git config user.email hpcflow-actions@users.noreply.github.com

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION_BUMP }}

      - name: Get git-chglog executable
        run: |
          wget https://github.com/git-chglog/git-chglog/releases/download/v0.15.0/git-chglog_0.15.0_linux_amd64.tar.gz
          tar --extract --file git-chglog_0.15.0_linux_amd64.tar.gz git-chglog

      - name: Install commitizen
        run: pip install commitizen

      - name: Manipulate tags (stable release)
        if: github.event.pull_request.base.ref == 'main'
        run:
          | # delete all pre-release tags, set current version to the latest stable release,
          CUR_PRE_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "CUR_PRE_TAG is: $CUR_PRE_TAG"
          echo "cur_pre_tag=$CUR_PRE_TAG" >> $GITHUB_ENV
          git tag -l | awk '/^(v[0-9]+\.[0-9]+\.[0-9]+(a|b|rc).*)$/ {print $1}' | xargs git tag -d

      - name: Get current tag
        run: |
          CUR_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "CUR_TAG is: $CUR_TAG"
          echo "cur_tag=$CUR_TAG" >> $GITHUB_ENV

      - name: Commitizen bump (pre-release) # Bump version strings (pre-release) and add a new tag; commit
        if: github.event.pull_request.base.ref == 'develop'
        run: cz bump --prerelease alpha

      - name: Commitizen bump # First update version number to latest stable release, then bump to new stable release, add a new tag and commit
        if: github.event.pull_request.base.ref == 'main'
        run: |
          python3 -c "
          from commitizen.bump import update_version_in_files
          update_version_in_files(
              current_version='${{ env.cur_pre_tag }}'.lstrip('v'),
              new_version='${{ env.cur_tag }}'.lstrip('v'),
              files=['pyproject.toml', 'hpcflow/_version.py'],
          )"
          cz bump

      - name: Get new tag
        id: get_new_tag
        run: |
          NEW_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "NEW_TAG is: $NEW_TAG"
          echo "new_tag=$NEW_TAG" >> $GITHUB_ENV
          echo "::set-output name=new_tag_name::$NEW_TAG"

      - name: Generate CHANGELOG (stable release)
        if: github.event.pull_request.base.ref == 'main'
        run: |
          ./git-chglog --output CHANGELOG.md
          git add CHANGELOG.md

      - name: Generate CHANGELOG-dev (pre-release)
        if: github.event.pull_request.base.ref == 'develop'
        run: |
          ./git-chglog --output CHANGELOG-dev.md
          git add CHANGELOG-dev.md

      - name: Push new CHANGELOG
        run: |
          git tag -d ${{ env.new_tag }}
          git commit --amend --no-edit
          git tag ${{ env.new_tag }}
          git push && git push origin ${{ env.new_tag }}

      - name: Rebase into develop branch if exists (stable release)
        if: github.event.pull_request.base.ref == 'main'
        run: |
          exists_in_remote=$(git ls-remote --heads origin refs/heads/develop)
          echo "exists_in_remote: $exists_in_remote"
          if [[ -n $exists_in_remote ]]; then
            export SKIP=end-of-file-fixer
            git checkout develop
            git pull
            git rebase main
            git push -u origin develop
          else
            echo "No develop branch to merge into."
          fi

      - name: Generate incremental CHANGELOG for GitHub release body (stable release)
        if: github.event.pull_request.base.ref == 'main'
        run: |
          ./git-chglog --template .chglog/RELEASE.tpl.md --output CHANGELOG_increment.md ${{ env.cur_tag }}..
          cat CHANGELOG_increment.md

      - name: Generate incremental CHANGELOG for GitHub release body (pre-release)
        if: github.event.pull_request.base.ref == 'develop'
        run: |
          ./git-chglog --template .chglog/RELEASE.tpl.md --output CHANGELOG_increment.md ${{ env.new_tag }}
          cat CHANGELOG_increment.md

      - uses: actions/upload-artifact@v2
        with:
          name: CHANGELOG_increment
          path: CHANGELOG_increment.md

  build-executables:
    needs: bump-version
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019, macos-10.15]
        include:
          - os: windows-2019
            executable_ext: .exe
            executable_os: win
          - os: macos-10.15
            executable_ext: ""
            executable_os: macOS

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.base.ref }} # otherwise we get the ref when the workflow started (missing above commit)

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION_BUILD_EXES }}

      - name: Cache the virtualenv
        uses: actions/cache@v2
        with:
          path: ./.venv
          key: venv-${{ matrix.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install poetry
        run: python -m pip install poetry==1.1.11

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Install dependencies
        run: |
          poetry install --no-dev
          poetry run pip install pyinstaller

      - name: Build with pyinstaller for ${{matrix.executable_os}}
        run: poetry run pyinstaller matflow/cli.py --name=matflow-${{ needs.bump-version.outputs.new_tag_name }} --onefile

      - name: Rename executable for ${{matrix.executable_os}}
        run: mv dist/matflow-${{ needs.bump-version.outputs.new_tag_name }}${{ matrix.executable_ext }} dist/matflow-${{ needs.bump-version.outputs.new_tag_name }}-${{ matrix.executable_os }}${{ matrix.executable_ext }}

      - uses: actions/upload-artifact@v2
        with:
          name: matflow-${{ needs.bump-version.outputs.new_tag_name }}-${{ matrix.executable_os }}${{ matrix.executable_ext }}
          path: dist/matflow-${{ needs.bump-version.outputs.new_tag_name }}-${{ matrix.executable_os }}${{ matrix.executable_ext }}

      - name: Basic executable test
        run: dist/matflow-${{ needs.bump-version.outputs.new_tag_name }}-${{ matrix.executable_os }}${{ matrix.executable_ext }} --version

  build-executables-linux:
    runs-on: ubuntu-latest
    needs: bump-version
    container:
      image: aplowman/centos7-poetry
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.base.ref }} # otherwise we get the ref when the workflow started (missing above commit)

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Cache the virtualenv
        uses: actions/cache@v2
        with:
          path: ./.venv
          key: venv-CentOS-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: |
          poetry install --no-dev
          poetry run pip install pyinstaller

      - name: Build with pyinstaller for CentOS
        run: poetry run pyinstaller matflow/cli.py --name=matflow-${{ needs.bump-version.outputs.new_tag_name }}-linux --onefile

      - uses: actions/upload-artifact@v2
        with:
          name: matflow-${{ needs.bump-version.outputs.new_tag_name }}-linux
          path: dist/matflow-${{ needs.bump-version.outputs.new_tag_name }}-linux

      - name: Basic executable test
        run: dist/matflow-${{ needs.bump-version.outputs.new_tag_name }}-linux --version

  release-github-PyPI:
    needs: [bump-version, build-executables, build-executables-linux]
    runs-on: ubuntu-latest
    outputs:
      binary_download_links: ${{ steps.get_binary_download_links.outputs.binary_download_links }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.base.ref }} # otherwise we get the ref when the workflow started (missing above commit)

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION_RELEASE }}

      - name: Cache the virtualenv
        uses: actions/cache@v2
        with:
          path: ./.venv
          key: venv-${{ hashFiles('**/poetry.lock') }}

      - name: Install poetry
        run: python -m pip install poetry==1.1.11

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Cache the virtualenv
        uses: actions/cache@v2
        with:
          path: ./.venv
          key: venv-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install

      - name: Build (for PyPI)
        run: |
          poetry build

      - run: mkdir release-artifacts

      - uses: actions/download-artifact@v2
        id: download_executables
        with:
          path: release-artifacts

      - name: Release
        id: release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release-artifacts/CHANGELOG_increment/CHANGELOG_increment.md
          tag_name: ${{ needs.bump-version.outputs.new_tag_name }}
          files: release-artifacts/hpcflow-*/*
          prerelease: ${{ github.event.pull_request.base.ref == 'develop' }}

      - name: Release info
        id: get_binary_download_links
        run: |
          binaryYaml=$(python3 -c "
          from pathlib import Path
          out_yaml = ''
          for i in Path('release-artifacts').glob('*/hpcflow*'):
            out_yaml += str(i.name) + ': https://github.com/hpcflow/hpcflow-new/releases/download/${{ needs.bump-version.outputs.new_tag_name }}'
            out_yaml += f'/{str(i.name)}\n'
          print(out_yaml)
          ")
          # escape new lines:
          binaryYaml="${binaryYaml//'%'/'%25'}"
          binaryYaml="${binaryYaml//$'\n'/'%0A'}"
          binaryYaml="${binaryYaml//$'\r'/'%0D'}"
          echo "::set-output name=binary_download_links::$binaryYaml"

      - name: Publish (to test PyPI)
        run: |
          poetry config repositories.pypi https://test.pypi.org/legacy/ 
          poetry config pypi-token.pypi ${{ secrets.TEST_PYPI }}
          poetry publish --repository pypi

  build-documentation:
    needs: release-github-PyPI
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # get all history and tags
          ref: ${{ github.event.pull_request.base.ref }} # otherwise we get the ref when the workflow started (missing above commit)
          token: ${{ secrets.HPCFLOW_ACTIONS_TOKEN }}

      - run: |
          git config user.name hpcflow-actions
          git config user.email hpcflow-actions@users.noreply.github.com

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION_BUILD_DOCS }}

      - name: Write binary links YAML file and push
        run: |
          echo -e "${{ needs.release-github-PyPI.outputs.binary_download_links }}" > docs/source/released_binaries.yml
          git add .
          git commit -m "build: update binary download links file [skip ci]"
          git push

      - name: Rebase into develop branch if exists (stable release)
        if: github.event.pull_request.base.ref == 'main'
        run: |
          exists_in_remote=$(git ls-remote --heads origin refs/heads/develop)
          echo "exists_in_remote: $exists_in_remote"
          if [[ -n $exists_in_remote ]]; then
            export SKIP=end-of-file-fixer
            git checkout develop
            git pull
            git rebase main
            git push -u origin develop
          else
            echo "No develop branch to merge into."
          fi

      - name: Cache the virtualenv
        uses: actions/cache@v2
        with:
          path: ./.venv
          key: venv-${{ matrix.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install poetry
        run: curl -sSL https://install.python-poetry.org | python3 -

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Install dependencies
        run: poetry install

      - name: Build documentation with Sphinx
        run: |
          cd docs
          poetry run make clean
          poetry run make html

      - name: Upload documentation artifact
        uses: actions/upload-artifact@v2
        with:
          name: docs_html
          path: docs/build/html

  update-website:
    needs: [bump-version, release-github-PyPI, build-documentation]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION_UPDATE_WEB }}

      - uses: actions/checkout@v2
        with:
          repository: hpcflow/hpcflow.github.io
          token: ${{ secrets.HPCFLOW_ACTIONS_TOKEN }}

      - run: |
          git config user.name hpcflow-actions
          git config user.email hpcflow-actions@users.noreply.github.com

      - name: Download documentation artifact
        uses: actions/download-artifact@v2
        with:
          name: docs_html
          path: docs/${{ needs.bump-version.outputs.new_tag_name }}

      - name: Update stable docs symlink
        if: github.event.pull_request.base.ref == 'main'
        run: |
          ln -sfn ${{ needs.bump-version.outputs.new_tag_name }} docs/stable

      - name: Update pre-release docs symlink
        if: github.event.pull_request.base.ref == 'develop'
        run: |
          ln -sfn ${{ needs.bump-version.outputs.new_tag_name }} docs/dev

      - run: |
          tree

      - name: Update doc version switcher
        run: |
          python docs/make_vers_switcher.py

      - name: Push changes
        run: |
          git add .
          git commit -m "update content"
          git push
