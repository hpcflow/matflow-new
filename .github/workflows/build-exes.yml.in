name: build-exes

env:
  PYTHON_VERSION_BUILD_EXES: 3.9

on:
  workflow_dispatch:

jobs:
  build-executables:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019, macos-10.15]
        include:
          - os: windows-2019
            executable_ext: .exe
            executable_os: win
          - os: macos-10.15
            executable_ext: ""
            executable_os: macOS

    runs-on: {% raw %}${{ matrix.os }}{% endraw %}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # get all history and tags

      - uses: actions/setup-python@v2
        with:
          python-version: {% raw %}${{ env.PYTHON_VERSION_BUILD_EXES }}{% endraw %}

      - name: Cache the virtualenv
        uses: actions/cache@v2
        with:
          path: ./.venv
          key: {% raw %}venv-${{ matrix.os }}-${{ hashFiles('**/poetry.lock') }}{% endraw %}

      - name: Install poetry
        run: python -m pip install poetry==1.1.11

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Install dependencies
        run: poetry install --no-dev --extras "pyinstaller"

      - name: Get exectuable version name (non Windows)
        if: "!contains(matrix.os, 'windows')"
        run: |
          CUR_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "CUR_TAG is: $CUR_TAG"
          echo "cur_tag=$CUR_TAG" >> $GITHUB_ENV
          vers=$(git describe --tags)
          echo "vers is: $vers"
          echo "vers=$vers" >> $GITHUB_ENV

      - name: Get exectuable version name (Windows)
        if: contains(matrix.os, 'windows')
        run: |
          $CUR_TAG = $(git describe --tags $(git rev-list --tags --max-count=1))
          echo "CUR_TAG is: $CUR_TAG"
          echo "cur_tag=$CUR_TAG" >> $env:GITHUB_ENV
          $vers = git describe --tags
          echo "vers is: $vers"
          echo "vers=$vers" >> $env:GITHUB_ENV

      - name: Build with pyinstaller for {% raw %}${{ matrix.executable_os }}{% endraw %}
        run: poetry run pyinstaller --name={{ executable_name }}-{% raw %}${{ env.vers }}-${{ matrix.executable_os }}{% endraw %} --onefile {{ pyinstaller_package }}

      - name: Upload executable artifact
        uses: actions/upload-artifact@v2
        with:
          name: {{ executable_name }}-{% raw %}${{ env.vers }}-${{ matrix.executable_os }}${{ matrix.executable_ext }}{% endraw %}
          path: dist/{{ executable_name }}-{% raw %}${{ env.vers }}-${{ matrix.executable_os }}${{ matrix.executable_ext }}{% endraw %}

      - name: Upload spec file
        uses: actions/upload-artifact@v2
        with:
          name: {{ executable_name }}-{% raw %}${{ env.vers }}-${{ matrix.executable_os }}{% endraw %}.spec
          path: {{ executable_name }}-{% raw %}${{ env.vers }}-${{ matrix.executable_os }}{% endraw %}.spec

      - name: Upload build directory
        uses: actions/upload-artifact@v2
        with:
          name: {{ executable_name }}-{% raw %}${{ env.vers }}-${{ matrix.executable_os }}{% endraw %}-build
          path: build/{{ executable_name }}-{% raw %}${{ env.vers }}-${{ matrix.executable_os }}{% endraw %}

      - name: Basic executable test (windows)
        if: contains(matrix.os, 'windows')
        run: |
          $tag = "{% raw %}${{ env.cur_tag }}{% endraw %}"
          $tagNoV = $tag.trim('v')
          ${{ executable_name }}_vers = dist/{{ executable_name }}-{% raw %}${{ env.vers }}-${{ matrix.executable_os }}${{ matrix.executable_ext }}{% endraw %} --version
          ${{ executable_name }}_vers_expected = "{{ executable_name }}, version $tagNoV"
          echo ${{ executable_name }}_vers
          echo "${{ executable_name }}_vers_expected"
          if (${{ executable_name }}_vers -ne ${{ executable_name }}_vers_expected) {
            exit 1
          }

      - name: Basic executable test (non-windows)
        if: "!contains(matrix.os, 'windows')"
        run: |
          tag={% raw %}${{ env.cur_tag }}{% endraw %}
          tagNoV=${tag:1}
          {{ executable_name }}_vers=$(dist/{{ executable_name }}-{% raw %}${{ env.vers }}-${{ matrix.executable_os }}${{ matrix.executable_ext }}{% endraw %} --version)
          {{ executable_name }}_vers_expected="{{ executable_name }}, version $tagNoV"
          echo ${{ executable_name }}_vers
          echo ${{ executable_name }}_vers_expected
          [ "${{ executable_name }}_vers" = "${{ executable_name }}_vers_expected" ]

  build-executables-linux:
    runs-on: ubuntu-latest
    container:
      image: aplowman/centos7-poetry
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # get all history and tags

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Cache the virtualenv
        uses: actions/cache@v2
        with:
          path: ./.venv
          key: {% raw %}venv-CentOS-${{ hashFiles('**/poetry.lock') }}{% endraw %}

      - name: Install dependencies
        run: poetry install --no-dev --extras "pyinstaller"

      - name: Get exectuable version name
        run: |
          CUR_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "CUR_TAG is: $CUR_TAG"
          echo "cur_tag=$CUR_TAG" >> $GITHUB_ENV
          vers=$(git describe --tags)
          echo "vers is: $vers"
          echo "vers=$vers" >> $GITHUB_ENV

      - name: Build with pyinstaller for CentOS
        run: poetry run pyinstaller --name={{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-linux --onefile {{ pyinstaller_package }}

      - name: Upload executable artifact
        uses: actions/upload-artifact@v2
        with:
          name: {{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-linux
          path: dist/{{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-linux

      - name: Upload spec file
        uses: actions/upload-artifact@v2
        with:
          name: {{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-linux.spec
          path: {{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-linux.spec

      - name: Upload build directory
        uses: actions/upload-artifact@v2
        with:
          name: {{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-linux-build
          path: build/{{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-linux

      - name: Basic executable test
        run: |
          tag={% raw %}${{ env.cur_tag }}{% endraw %}
          tagNoV=${tag:1}
          {{ executable_name }}_vers=$(dist/{{ executable_name }}-{% raw %}${{ env.vers }{% endraw %}}-linux --version)
          {{ executable_name }}_vers_expected="{{ executable_name }}, version $tagNoV"
          echo ${{ executable_name }}_vers
          echo ${{ executable_name }}_vers_expected
          [ "${{ executable_name }}_vers" = "${{ executable_name }}_vers_expected" ]
