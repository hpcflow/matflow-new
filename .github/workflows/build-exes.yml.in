name: build-exes

env:
  PYTHON_VERSION_BUILD_EXES: "3.12"
  POETRY_VERSION: "1.4"

on:
  workflow_dispatch:
    inputs:
      build_linux:
        description: "Build executables for linux?"
        required: true
        type: boolean
        default: true
      build_macos:
        description: "Build executables for macOS?"
        required: true
        type: boolean
        default: true
      build_windows:
        description: "Build executables for Windows?"
        required: true
        type: boolean
        default: true
      build_onedir:
        description: "Build one-dir?"
        required: true
        type: boolean
        default: true
      build_onefile:
        description: "Build one-file?"
        required: true
        type: boolean
        default: true
      logLevel:
        description: "PyInstaller log level"
        required: true
        default: "INFO"
      unit_test_args:
        description: "CLI args to pass verbatim to pytest (unit tests)."
        required: false
        type: string
        default: ""        

jobs:
  build-windows-executables:
    if: github.event.inputs.build_windows == 'true'
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # get all history and tags

      - uses: actions/setup-python@v5
        with:
          python-version: {% raw %}${{ env.PYTHON_VERSION_BUILD_EXES }}{% endraw %}

      - name: Cache the virtualenv
        uses: actions/cache@v4
        with:
          path: ./.venv
          key: {% raw %}venv-build-windows-latest-${{ hashFiles('**/poetry.lock') }}{% endraw %}

      - name: Install poetry
        run: python -m pip install poetry=={% raw %}${{ env.POETRY_VERSION }}{% endraw %}

      - name: Configure poetry
        run: |
          poetry config virtualenvs.in-project true
          poetry config installer.modern-installation false

      - name: Install dependencies
        run: poetry install --without dev

      - name: Get executable version name and store git SHA
        run: |
          $CUR_TAG = $(git describe --tags $(git rev-list --tags --max-count=1))
          echo "CUR_TAG is: $CUR_TAG"
          echo "cur_tag=$CUR_TAG" >> $env:GITHUB_ENV
          $vers = git describe --tags
          echo "vers is: $vers"
          echo "vers=$vers" >> $env:GITHUB_ENV
          $sha = git rev-parse HEAD
          echo "sha is: $sha"
          echo "sha=$sha" >> $env:GITHUB_ENV

      - name: Build with pyinstaller for Windows (file)
        if: github.event.inputs.build_onefile == 'true'
        working-directory: {{ pyinstaller_dir }}
        run: ./make.ps1 -ExeName "{{ executable_name }}-{% raw %}${{ env.vers }}-win" -LogLevel ${{ github.event.inputs.logLevel }}{% endraw %} -BuildType 'onefile'

      - name: Build with pyinstaller for Windows (folder)
        if: github.event.inputs.build_onedir == 'true'
        working-directory: {{ pyinstaller_dir }}
        run: ./make.ps1 -ExeName "{{ executable_name }}-{% raw %}${{ env.vers }}-win-dir" -LogLevel ${{ github.event.inputs.logLevel }}{% endraw %} -BuildType 'onedir'

      - name: Upload executable artifact (file)
        if:  github.event.inputs.build_onefile == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: {{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-win.exe
          path: {{ pyinstaller_dir }}/dist/onefile/{{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-win.exe

      - name: Upload executable artifact (folder)
        if:  github.event.inputs.build_onedir == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: {{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-win-dir
          path: {{ pyinstaller_dir }}/dist/onedir/{{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-win-dir

      - name: Upload spec file
        if:  ((github.event.inputs.build_onefile == 'true') || (github.event.inputs.build_onedir == 'true'))
        uses: actions/upload-artifact@v4
        with:
          name: {{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-win.spec
          path: {{ pyinstaller_dir }}/{{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-win.spec

      - name: Upload build directory
        if:  ((github.event.inputs.build_onefile == 'true') || (github.event.inputs.build_onedir == 'true'))
        uses: actions/upload-artifact@v4
        with:
          name: {{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-win-build
          path: {{ pyinstaller_dir }}/build/{{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-win

      - name: Set demo data GitHub URL using current git SHA (file) # instead of default which is current version tag
        if: github.event.inputs.build_onefile == 'true'
        run: |
          {{ pyinstaller_dir }}/dist/onefile/{{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-win.exe config set-github-demo-data-dir {% raw %}${{ env.sha }}{% endraw %}

      - name: Set demo data GitHub URL using current git SHA (folder) # instead of default which is current version tag
        if: github.event.inputs.build_onedir == 'true'
        run: |
          {{ pyinstaller_dir }}/dist/onedir/{{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-win-dir/{{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-win-dir.exe config set-github-demo-data-dir {% raw %}${{ env.sha }}{% endraw %}

      - name: Run test suite on the frozen app (file)
        if:  github.event.inputs.build_onefile == 'true'
        env:
          GH_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}
        run: |
          {{ pyinstaller_dir }}/dist/onefile/{{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-win.exe test {% raw %}${{ github.event.inputs.unit_test_args }}{% endraw %}

      - name: Run test suite on the frozen app (folder)
        if:  github.event.inputs.build_onedir == 'true'
        env:
          GH_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}
        run: |
          {{ pyinstaller_dir }}/dist/onedir/{{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-win-dir/{{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-win-dir.exe test {% raw %}${{ github.event.inputs.unit_test_args }}{% endraw %}


  build-macos-executables:
    if: github.event.inputs.build_macos == 'true'
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # get all history and tags

      - uses: actions/setup-python@v5
        with:
          python-version: {% raw %}${{ env.PYTHON_VERSION_BUILD_EXES }}{% endraw %}

      - name: Cache the virtualenv
        uses: actions/cache@v4
        with:
          path: ./.venv
          key: {% raw %}venv-build-macos-13-${{ hashFiles('**/poetry.lock') }}{% endraw %}

      - name: Install poetry
        run: python -m pip install poetry=={% raw %}${{ env.POETRY_VERSION }}{% endraw %}

      - name: Configure poetry
        run: |
          poetry config virtualenvs.in-project true
          poetry config installer.modern-installation false

      - name: Install dependencies
        run: poetry install --without dev

      - name: Get executable version name and store git SHA
        run: |
          CUR_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "CUR_TAG is: $CUR_TAG"
          echo "cur_tag=$CUR_TAG" >> $GITHUB_ENV
          vers=$(git describe --tags)
          echo "vers is: $vers"
          echo "vers=$vers" >> $GITHUB_ENV
          sha=$(git rev-parse HEAD)
          echo "sha is: $sha"
          echo "sha=$sha" >> $GITHUB_ENV

      - name: Build with pyinstaller for macOS (file)
        if: github.event.inputs.build_onefile == 'true'
        working-directory: {{ pyinstaller_dir }}
        run: ./make.sh {{ executable_name }}-{% raw %}${{ env.vers }}-macOS ${{ github.event.inputs.logLevel }}{% endraw %} 'onefile'

      - name: Build with pyinstaller for macOS (folder)
        if: github.event.inputs.build_onedir == 'true'
        working-directory: {{ pyinstaller_dir }}
        run: ./make.sh {{ executable_name }}-{% raw %}${{ env.vers }}-macOS-dir ${{ github.event.inputs.logLevel }}{% endraw %} 'onedir'

      - name: Upload executable artifact (file)
        if:  github.event.inputs.build_onefile == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: {{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-macOS
          path: {{ pyinstaller_dir }}/dist/onefile/{{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-macOS

      - name: Upload executable artifact (folder)
        if:  github.event.inputs.build_onedir == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: {{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-macOS-dir
          path: {{ pyinstaller_dir }}/dist/onedir/{{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-macOS-dir

      - name: Upload spec file
        if:  ((github.event.inputs.build_onefile == 'true') || (github.event.inputs.build_onedir == 'true'))
        uses: actions/upload-artifact@v4
        with:
          name: {{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-macOS.spec
          path: {{ pyinstaller_dir }}/{{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-macOS.spec

      - name: Upload build directory
        if:  ((github.event.inputs.build_onefile == 'true') || (github.event.inputs.build_onedir == 'true'))
        uses: actions/upload-artifact@v4
        with:
          name: {{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-macOS-build
          path: {{ pyinstaller_dir }}/build/{{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-macOS

      - name: Set demo data GitHub URL using current git SHA (file) # instead of default which is current version tag
        if: github.event.inputs.build_onefile == 'true'
        run: |
          {{ pyinstaller_dir }}/dist/onefile/{{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-macOS config set-github-demo-data-dir {% raw %}${{ env.sha }}{% endraw %}

      - name: Set demo data GitHub URL using current git SHA (folder) # instead of default which is current version tag
        if: github.event.inputs.build_onedir == 'true'
        run: |
          {{ pyinstaller_dir }}/dist/onedir/{{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-macOS-dir/{{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-macOS-dir config set-github-demo-data-dir {% raw %}${{ env.sha }}{% endraw %}

      - name: Run test suite on the frozen app (file)
        if:  github.event.inputs.build_onefile == 'true'
        env:
          GH_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}
        run: |
          {{ pyinstaller_dir }}/dist/onefile/{{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-macOS test {% raw %}${{ github.event.inputs.unit_test_args }}{% endraw %}

      - name: Run test suite on the frozen app (folder)
        if:  github.event.inputs.build_onedir == 'true'
        env:
          GH_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}
        run: |
          {{ pyinstaller_dir }}/dist/onedir/{{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-macOS-dir/{{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-macOS-dir test {% raw %}${{ github.event.inputs.unit_test_args }}{% endraw %}


  build-executables-linux:
    if: github.event.inputs.build_linux == 'true'
    runs-on: ubuntu-latest
    env:
      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: "true"
      ACTIONS_RUNNER_FORCE_ACTIONS_NODE_VERSION: node16
    container:
      image: ghcr.io/hpcflow/centos7-poetry:latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # get all history and tags

      - name: Set ownership
        run: |
          # see: https://github.com/actions/runner/issues/2033#issuecomment-1204205989
          # this is to fix GIT not liking owner of the checkout dir
          chown -R $(id -u):$(id -g) $PWD

      - name: Configure poetry
        run: |
          poetry config virtualenvs.in-project true
          poetry config installer.modern-installation false

      - name: Cache the virtualenv
        uses: actions/cache@v3
        with:
          path: ./.venv
          key: {% raw %}venv-build-CentOS-${{ hashFiles('**/poetry.lock') }}{% endraw %}

      - name: Install dependencies
        run: poetry install --without dev

      - name: Get executable version name and store git SHA
        run: |
          CUR_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "CUR_TAG is: $CUR_TAG"
          echo "cur_tag=$CUR_TAG" >> $GITHUB_ENV
          vers=$(git describe --tags)
          echo "vers is: $vers"
          echo "vers=$vers" >> $GITHUB_ENV
          sha=$(git rev-parse HEAD)
          echo "sha is: $sha"
          echo "sha=$sha" >> $GITHUB_ENV

      - name: Build with pyinstaller for CentOS (file)
        if: github.event.inputs.build_onefile == 'true'
        working-directory: {{ pyinstaller_dir }}
        run: ./make.sh {{ executable_name }}-{% raw %}${{ env.vers }}-linux ${{ github.event.inputs.logLevel }}{% endraw %} onefile

      - name: Build with pyinstaller for CentOS (folder)
        if: github.event.inputs.build_onedir == 'true'
        working-directory: {{ pyinstaller_dir }}
        run: ./make.sh {{ executable_name }}-{% raw %}${{ env.vers }}-linux-dir ${{ github.event.inputs.logLevel }}{% endraw %} onedir

      - name: Upload executable artifact (file)
        if: github.event.inputs.build_onefile == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: {{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-linux
          path: {{ pyinstaller_dir }}/dist/onefile/{{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-linux

      - name: Upload executable artifact (folder)
        if: github.event.inputs.build_onedir == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: {{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-linux-dir
          path: {{ pyinstaller_dir }}/dist/onedir/{{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-linux-dir

      - name: Upload spec file
        if:  ((github.event.inputs.build_onefile == 'true') || (github.event.inputs.build_onedir == 'true'))
        uses: actions/upload-artifact@v3
        with:
          name: {{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-linux.spec
          path: {{ pyinstaller_dir }}/{{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-linux.spec

      - name: Upload build directory
        if:  ((github.event.inputs.build_onefile == 'true') || (github.event.inputs.build_onedir == 'true'))
        uses: actions/upload-artifact@v3
        with:
          name: {{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-linux-build
          path: {{ pyinstaller_dir }}/build/{{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-linux

      - name: Set demo data GitHub URL using current git SHA (file) # instead of default which is current version tag
        if: github.event.inputs.build_onefile == 'true'
        run: |
          {{ pyinstaller_dir }}/dist/onefile/{{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-linux config set-github-demo-data-dir {% raw %}${{ env.sha }}{% endraw %}

      - name: Set demo data GitHub URL using current git SHA (folder) # instead of default which is current version tag
        if: github.event.inputs.build_onedir == 'true'
        run: |
          {{ pyinstaller_dir }}/dist/onedir/{{ executable_name }}-{% raw %}${{ env.vers }}-linux-dir/{% endraw %}{{ executable_name }}-{% raw %}${{ env.vers }}-linux-dir{% endraw %} config set-github-demo-data-dir {% raw %}${{ env.sha }}{% endraw %}

      - name: Run test suite on the frozen app (file)
        if: github.event.inputs.build_onefile == 'true'
        env:
          GH_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}
        run: |
          {{ pyinstaller_dir }}/dist/onefile/{{ executable_name }}-{% raw %}${{ env.vers }}{% endraw %}-linux test {% raw %}${{ github.event.inputs.unit_test_args }}{% endraw %}

      - name: Run test suite on the frozen app (folder)
        if: github.event.inputs.build_onedir == 'true'
        env:
          GH_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}
        run: |
          {{ pyinstaller_dir }}/dist/onedir/{{ executable_name }}-{% raw %}${{ env.vers }}-linux-dir/{% endraw %}{{ executable_name }}-{% raw %}${{ env.vers }}-linux-dir{% endraw %} test {% raw %}${{ github.event.inputs.unit_test_args }}{% endraw %}
