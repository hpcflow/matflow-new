- objective: get_3dvae_fingerprint
  web_doc: false
  inputs:
    - parameter: volume_element
    - parameter: checkpoint_path
    - parameter: metadata_path
  outputs:
    - parameter: fingerprint
  actions:
    - script: <<script:pytorch/get_3dvae_fingerprint.py>>
      script_data_in: direct
      script_data_out: direct
      script_exe: python_script
      environments:
      - scope:
          type: any
        environment: pytorch_env

- objective: test_t1_bash
  web_doc: false
  inputs:
    - parameter: p1
  outputs:
    - parameter: p2
  actions:
    - environments:
        - scope:
            type: any
          environment: null_env
      abortable: true
      commands:
        - command: echo "$((<<parameter:p1>> + 100))"
          stdout: <<parameter:p2>>
        - command: |
            count=0
            while [ $count -le 100 ]
            do
                echo "count: $count; sleeping..."
                echo "This message goes to stderr" 1>&2
                ((count++))
                sleep 1
            done

- objective: test_t1_ps
  web_doc: false
  inputs:
    - parameter: p1
  outputs:
    - parameter: p2
  actions:
    - environments:
        - scope:
            type: any
          environment: python_env # null_env
      abortable: true
      commands:
        - command: |
            & {
              $count = 0
              while ($true) {
                Write-Host "count: $count; sleeping..."
                $count++
                if ($count -ge <<parameter:p1>>) {
                  break
                }
                Start-Sleep 1
              }
              Write-Output ((<<parameter:p1>> + 100))
            }
            <<executable:python_script>> --version
          stdout: <<parameter:p2>>

- objective: test_t2_bash
  web_doc: false
  inputs:
    - parameter: p2
  outputs:
    - parameter: p3
  actions:
    - environments:
        - scope:
            type: any
          environment: null_env
      abortable: true
      commands:
        - command: echo "$((<<parameter:p2>> + 100))"
          stdout: <<parameter:p3>>

- objective: test_t2_ps
  web_doc: false
  inputs:
    - parameter: p2
  outputs:
    - parameter: p3
  actions:
    - environments:
        - scope:
            type: any
          environment: null_env
      abortable: true
      commands:
        - command: Write-Output ((<<parameter:p2>> + 100))
          stdout: <<parameter:p3>>

# - objective: dummy_task_1
#   inputs:
#     - parameter: p1
#     - parameter: p2
#   outputs:
#     - parameter: p3
#   actions:
#     - environments:
#         - scope:
#             type: any
#           environment: python_env
#       input_file_generators:
#         - input_file: t1_infile_1
#           from_inputs: [p2]
#           script: <<script:write_t1_infile_1.py>>
#       commands:
#         - command: >-
#             Set-Content -Path .\test.txt -Value "hello from ${pwd}; p1=<<parameter:p1>> p2=<<parameter:p2>> <<file:t1_infile_1>>"
#       output_file_parsers:
#         p3:
#           from_files: [t1_outfile_1]
#           script: <<script:read_t1_outfile_1.py>>

# - objective: file_modifying_task
#   inputs:
#     - parameter: p1
#   outputs:
#     - parameter: p2
#   actions:
#     - environments:
#         - scope:
#             type: any
#           environment: python_env
#       input_file_generators:
#         - input_file: my_file
#           from_inputs: [p1]
#           script: <<script:write_my_file.py>>
#       commands:
#         - command: >-
#             Add-Content -Path <<file:my_file>> -Value "modified file contents!"
#       output_file_parsers:
#         p2:
#           from_files: [my_file]
#           script: <<script:read_my_file.py>>

- objective: generate_microstructure_seeds
  method: from_random
  inputs:
    - parameter: VE_size
    - parameter: num_grains
    - parameter: phase_label
  outputs:
    - parameter: microstructure_seeds
  actions:
    - script: <<script:damask/seeds_from_random.py>>
      script_data_in: direct
      script_data_out: direct
      script_exe: python_script
      environments:
        - scope:
            type: any
          environment: damask_parse_env

- objective: generate_volume_element
  method: from_voronoi
  inputs:
    - parameter: microstructure_seeds
    - parameter: VE_grid_size
    - parameter: homog_label
      default_value: SX
    - parameter: orientations
      default_value: null
    - parameter: scale_morphology
      default_value: null
    - parameter: scale_update_size
      default_value: true
  outputs:
    - parameter: volume_element
  actions:
    - script: <<script:damask/generate_volume_element_voronoi.py>>
      script_data_in: direct
      script_data_out: direct
      script_exe: python_script
      environments:
        - scope:
            type: any
          environment: damask_parse_env

- objective: visualise_VE
  method: VTK
  inputs:
    - parameter: volume_element
    - parameter: path
      default_value: geom.vti
  actions:
    - script: <<script:damask/write_geom.py>>
      script_data_in: direct
      script_exe: python_script
      save_files: [damask_geom_file]
      environments:
        - scope:
            type: any
          environment: damask_parse_env

- objective: sample_texture
  method: from_CTF_file
  implementation: mtex
  inputs:
    - parameter: compile
      default_value: false
      propagation_mode: explicit
    - parameter: CTF_file_path
    - parameter: specimen_symmetry
    - parameter: EBSD_phase
    - parameter: num_orientations
    - parameter: EBSD_reference_frame_transformation
      default_value: euler_to_spatial # or "spatial_to_euler" or null
    - parameter: EBSD_rotation # dict with keys "euler_angles_deg" list optional "keep_XY" bool, or "keep_euler" bool
      default_value: null
  outputs:
    - parameter: orientations
  actions:
    - script: <<script:mtex/sample_texture_CTF.m>>
      script_exe: compile_mtex
      environments:
        - scope:
            type: any
          environment: matlab_env
      rules:
        - path: inputs.compile
          condition:
            value.equal_to: true

    - script: sample_texture_CTF
      script_data_in: json
      script_data_out: hdf5
      script_exe: run_compiled_mtex
      environments:
        - scope:
            type: any
          environment: matlab_env
      rules:
        - path: inputs.compile
          condition:
            value.equal_to: true

    - script: <<script:mtex/sample_texture_CTF.m>>
      script_data_in: json
      script_data_out: hdf5
      script_exe: run_mtex
      environments:
        - scope:
            type: any
          environment: matlab_env
      rules:
        - path: inputs.compile
          condition:
            value.equal_to: false

- objective: sample_texture
  method: from_CRC_file
  implementation: mtex
  inputs:
    - parameter: compile
      default_value: false
      propagation_mode: explicit
    - parameter: CRC_file_path
    - parameter: specimen_symmetry
    - parameter: EBSD_phase
    - parameter: num_orientations
    - parameter: EBSD_reference_frame_transformation
      default_value: euler_to_spatial # or "spatial_to_euler" or null
    - parameter: EBSD_rotation # dict with keys "euler_angles_deg" list optional "keep_XY" bool, or "keep_euler" bool
      default_value: null
  outputs:
    - parameter: orientations
  actions:
    - script: <<script:mtex/sample_texture_CRC.m>>
      script_exe: compile_mtex
      environments:
        - scope:
            type: any
          environment: matlab_env
      rules:
        - path: inputs.compile
          condition:
            value.equal_to: true

    - script: sample_texture_CRC
      script_data_in: json
      script_data_out: hdf5
      script_exe: run_compiled_mtex
      environments:
        - scope:
            type: any
          environment: matlab_env
      rules:
        - path: inputs.compile
          condition:
            value.equal_to: true

    - script: <<script:mtex/sample_texture_CRC.m>>
      script_data_in: json
      script_data_out: hdf5
      script_exe: run_mtex
      environments:
        - scope:
            type: any
          environment: matlab_env
      rules:
        - path: inputs.compile
          condition:
            value.equal_to: false

- objective: sample_texture
  method: from_ODF_mat_file
  implementation: mtex
  inputs:
    - parameter: compile
      default_value: false
      propagation_mode: explicit
    - parameter: ODF_mat_file_path
    - parameter: num_orientations
  outputs:
    - parameter: orientations
  actions:
    - script: <<script:mtex/sample_texture_ODF_mat.m>>
      script_exe: compile_mtex
      environments:
        - scope:
            type: any
          environment: matlab_env
      rules:
        - path: inputs.compile
          condition:
            value.equal_to: true

    - script: sample_texture_ODF_mat
      script_data_in: json
      script_data_out: hdf5
      script_exe: run_compiled_mtex
      environments:
        - scope:
            type: any
          environment: matlab_env
      rules:
        - path: inputs.compile
          condition:
            value.equal_to: true

    - script: <<script:mtex/sample_texture_ODF_mat.m>>
      script_data_in: json
      script_data_out: hdf5
      script_exe: run_mtex
      environments:
        - scope:
            type: any
          environment: matlab_env
      rules:
        - path: inputs.compile
          condition:
            value.equal_to: false

- objective: sample_texture
  method: from_model_ODF
  implementation: mtex
  inputs:
    - parameter: num_orientations
    - parameter: crystal_symmetry
    - parameter: specimen_symmetry
    - parameter: ODF_components
    - parameter: compile
      default_value: false
      propagation_mode: explicit
  outputs:
    - parameter: orientations
  actions:
    - script: <<script:mtex/sample_texture_model_ODF.m>>
      script_exe: compile_mtex
      environments:
        - scope:
            type: any
          environment: matlab_env
      rules:
        - path: inputs.compile
          condition:
            value.equal_to: true

    - script: sample_texture_model_ODF
      script_data_in: json
      script_data_out: hdf5
      script_exe: run_compiled_mtex
      environments:
        - scope:
            type: any
          environment: matlab_env
      rules:
        - path: inputs.compile
          condition:
            value.equal_to: true

    - script: <<script:mtex/sample_texture_model_ODF.m>>
      script_data_in: json
      script_data_out: hdf5
      script_exe: run_mtex
      environments:
        - scope:
            type: any
          environment: matlab_env
      rules:
        - path: inputs.compile
          condition:
            value.equal_to: false

- objective: visualise_orientations
  method: pole_figure
  implementation: mtex
  inputs:
    - parameter: orientations
    - parameter: crystal_symmetry
    - parameter: pole_figure_directions
    - parameter: use_contours
      default_value: true
    - parameter: IPF_reference_direction
      default_value: z
    - parameter: colourbar_limits
      default_value: null
    - parameter: use_one_colourbar
      default_value: False
    - parameter: compile
      default_value: false
  actions:
    - script: <<script:mtex/plot_pole_figures.m>>
      script_exe: compile_mtex
      environments:
        - scope:
            type: any
          environment: matlab_env
      rules:
        - path: inputs.compile
          condition:
            value.equal_to: true

    - script: plot_pole_figures
      script_data_in:
        orientations: hdf5
        "*": json
      script_exe: run_compiled_mtex
      environments:
        - scope:
            type: any
          environment: matlab_env
      save_files: [mtex_pole_figures, mtex_IPF_figure]
      rules:
        - path: inputs.compile
          condition:
            value.equal_to: true

    - script: <<script:mtex/plot_pole_figures.m>>
      script_data_in:
        orientations: hdf5
        "*": json
      script_exe: run_mtex
      environments:
        - scope:
            type: any
          environment: matlab_env
      save_files: [mtex_pole_figures, mtex_IPF_figure]
      rules:
        - path: inputs.compile
          condition:
            value.equal_to: false

- objective: generate_orientations
  inputs:
    - parameter: num_orientations
  outputs:
    - parameter: orientations
  actions:
    - script: <<script:main_script_test.py>>
      script_data_in: json
      script_data_out: hdf5
      script_exe: python_script
      environments:
        - scope:
            type: any
          environment: python_env

- objective: define_p1
  web_doc: false
  inputs:
    - parameter: p1

- objective: define_load_case
  inputs:
    - parameter: load_case

# - objective: define_orientations
#   inputs:
#     - parameter: orientations
#       accept_multiple: true
#       labels:
#         oris_1: {}

- objective: simulate_VE_loading
  implementation: damask
  inputs:
    - parameter: volume_element
    - parameter: load_case
    - parameter: homogenization
    - parameter: damask_phases
    - parameter: damask_post_processing
    - parameter: VE_response_data
    - parameter: damask_viz
      default_value: null
    - parameter: single_crystal_parameters
      default_value: null
    - parameter: damask_solver
      default_value: null
    - parameter: damask_numerics
      default_value: null
  outputs:
    - parameter: damask_log
    - parameter: damask_post_processing_result
    - parameter: VE_response
    - parameter: damask_viz_result
  actions:
    - environments:
        - scope:
            type: processing
          environment: damask_parse_env
        - scope:
            type: main
          environment: damask_env
      input_file_generators:
        - input_file: damask_geom_file
          from_inputs: [volume_element]
          script: <<script:damask/write_geom.py>>
        - input_file: damask_load_file
          from_inputs: [load_case, damask_solver]
          script: <<script:damask/write_load.py>>
        - input_file: damask_material_file
          from_inputs:
            - volume_element
            - homogenization
            - damask_phases
            - single_crystal_parameters
          script: <<script:damask/write_material.py>>
        - input_file: damask_numerics_file
          from_inputs: [damask_numerics]
          script: <<script:damask/write_numerics.py>>
      abortable: true
      commands:
        - command: <<executable:damask_grid>> --load load.yaml --geom geom.vti --material material.yaml --numerics numerics.yaml
          stdout: stdout.log
          stderr: stderr.log
      output_file_parsers:
        damask_log:
          from_files: [damask_stdout_file]
          script: <<script:damask/read_log.py>>
        damask_post_processing_result:
          from_files: [damask_hdf5_file]
          save_files: false
          script: <<script:damask/process_damask_HDF5.py>>
          inputs: [damask_post_processing]
        VE_response:
          from_files: [damask_hdf5_file]
          save_files: false
          script: <<script:damask/extract_damask_HDF5.py>>
          inputs: [VE_response_data]
        damask_viz_result:
          from_files: [damask_hdf5_file]
          save_files: [damask_viz_files]
          clean_up: [damask_viz_files]
          inputs: [damask_viz]
          outputs: [VE_response]
          script: <<script:damask/viz_damask_HDF5.py>>
          rules:
            - path: inputs.damask_viz
              condition: { value.not_equal_to: null }

- objective: simulate_VE_loading
  implementation: damask_HC # high concurrency
  inputs:
    - parameter: volume_element
    - parameter: load_case
    - parameter: homogenization
    - parameter: damask_phases
    - parameter: damask_post_processing
    - parameter: VE_response_data
    - parameter: damask_viz
      default_value: null
    - parameter: single_crystal_parameters
      default_value: null
    - parameter: damask_solver
      default_value: null
    - parameter: damask_numerics
      default_value: null
  outputs:
    - parameter: VE_response
  actions:
    - environments:
        - scope:
            type: processing
          environment: damask_parse_env
        - scope:
            type: main
          environment: damask_env
      input_file_generators:
        - input_file: damask_geom_file # this actually writes all input files
          from_inputs:
            - volume_element
            - load_case
            - damask_solver
            - homogenization
            - damask_phases
            - single_crystal_parameters
            - damask_numerics
          script: <<script:damask/high_concurrency/write_input_files.py>>
      abortable: true
      commands:
        - command: <<executable:damask_grid>> --load load.yaml --geom geom.vti
          stdout: stdout.log
          stderr: stderr.log
      output_file_parsers:
        VE_response: # this generates VTK files as well if requested
          from_files: [damask_hdf5_file]
          save_files: false
          script: <<script:damask/high_concurrency/process_HDF5.py>>
          inputs: [damask_post_processing, VE_response_data, damask_viz]

- objective: read_tensile_test
  method: from_CSV
  inputs:
    - parameter: CSV_file_path
    - parameter: CSV_arguments
    - parameter: eng_stress_col_index
      default_value: null
    - parameter: eng_strain_col_index
      default_value: null
    - parameter: true_stress_col_index
      default_value: null
    - parameter: true_strain_col_index
      default_value: null
    - parameter: stress_units
      default_value: Pa
    - parameter: plastic_range
      default_value: null
  outputs:
    - parameter: tensile_test
  actions:
    - environments:
        - scope:
            type: any
          environment: formable_env
      script: <<script:formable/read_tensile_test_CSV.py>>
      script_data_in: direct
      script_data_out: direct
      script_exe: python_script

- objective: fit_single_crystal_parameters
  inputs:
    - parameter: VE_response
      group: fit_single_crystal_parameters
    - parameter: single_crystal_parameters
      group: fit_single_crystal_parameters
    - parameter: tensile_test
    - parameter: initial_damping
  outputs:
    - parameter: single_crystal_parameters
    - parameter: levenberg_marquardt_fitter
  actions:
    - environments:
        - scope:
            type: any
          environment: formable_env
      script: <<script:formable/fit_single_crystal_parameters.py>>
      script_data_in:
        VE_response: { format: direct, all_iterations: true }
        single_crystal_parameters: { format: direct, all_iterations: true }
        "*": { format: direct }
      script_data_out: direct
      script_exe: python_script

- objective: dump_all_yield_stresses
  inputs:
    - parameter: VE_response
      group: all_simulations
    - parameter: yield_point
    - parameter: dump_path
  actions:
    - environments:
        - scope:
            type: any
          environment: damask_parse_env
      script: <<script:damask/dump_all_yield_stresses.py>>
      script_data_in: direct
      script_data_out: direct
      script_exe: python_script

- objective: fit_yield_function
  inputs:
    - parameter: yield_function_name
    - parameter: yield_point_criteria
    - parameter: VE_response
      multiple: true
      labels:
        uniaxial: {}
        multiaxial:
          group: multiaxial_load_cases
    - parameter: fit_yield_fixed_parameters
      default_value: null
    - parameter: fit_yield_initial_parameters
      default_value: null
    - parameter: fit_yield_opt_parameters
      default_value: null
  outputs:
    - parameter: fitted_yield_functions
  actions:
    - environments:
        - scope:
            type: any
          environment: formable_env
      script: <<script:formable/fit_yield_function.py>>
      script_data_in: direct
      script_data_out: direct
      script_exe: python_script
- objective: print_hello
  web_doc: false
  inputs:
    - parameter: my_name
      default_value: "world"
  actions:
    - rules:
        - path: resources.os_name
          condition: { value.equal_to: posix }
      commands:
        - command: echo "Hello, <<parameter:my_name>>!"
    - rules:
        - path: resources.os_name
          condition: { value.equal_to: nt }
      commands:
        - command: Write-Host "Hello, <<parameter:my_name>>!"

- objective: demo_adder
  web_doc: false
  inputs:
    - parameter: number_1
    - parameter: number_2
  outputs:
    - parameter: sum
  actions:
    - rules:
        - path: resources.os_name
          condition: { value.equal_to: posix }
      commands:
        - command: echo "$((<<parameter:number_1>> + <<parameter:number_2>>))"
          stdout: <<int(parameter:sum)>>
    - rules:
        - path: resources.os_name
          condition: { value.equal_to: nt }
      commands:
        - command: "Write-Output (<<parameter:number_1>> + <<parameter:number_2>>)"
          stdout: <<int(parameter:sum)>>

- objective: demo_sleep
  web_doc: false
  inputs:
    - parameter: max_sleep_time
      default_value: 1800 # 30 mins
  outputs:
    - parameter: sleep_time
  actions:
    - rules:
        - path: resources.shell
          condition: { value.in: [bash, wsl] }
      # abortable: true # fails on some powershell
      commands:
        - command: |
            count=0
            while [ $count -le <<parameter:max_sleep_time>> ]
            do
                echo "count: $count; sleeping..."
                ((count++))
                echo $count > sleep_seconds.txt
                sleep 1
            done
    - rules:
        - path: resources.shell
          condition: { value.equal_to: powershell }
      # abortable: true # fails on some powershell
      commands:
        - command: |
            $count = 0
            while ($true) {
                Write-Host "count: $count; sleeping..."
                $count++
                if ($count -ge <<parameter:max_sleep_time>>) {
                    break
                }
                $count | Out-File -FilePath sleep_seconds.txt
                Start-Sleep 1
            }
    - rules:
        - path: resources.shell
          condition: { value.in: [bash, wsl] }
      commands:
        - command: head -n 1 sleep_seconds.txt
          stdout: <<int(parameter:sleep_time)>>
    - rules:
        - path: resources.shell
          condition: { value.equal_to: powershell }
      commands:
        - command: Write-Output (Get-Content sleep_seconds.txt)
          stdout: <<int(parameter:sleep_time)>>
# - objective: hello_world
#   actions:
#     - commands:
#         - command: 'Write-Output "Hello, world!"'
#       environments:
#         - scope:
#             type: any
#           environment: null_env
# - objective: prepare_atoms_box
#   inputs:
#     - parameter: number_atoms
#   outputs:
#     - parameter: box
#     - parameter: atoms
#   actions:
#     - environments:
#         main: lammps_parse_env
#       commands:
#         - command: doSomething

# - objective: optimise_atoms
#   method: empirical_potential
#   inputs:
#     - parameter: box
#     - parameter: atoms
#     - parameter: empirical_potential
#   outputs:
#     - parameter: optimised_atoms
#   actions:
#     - environments:
#         main: lammps_env
#         processing: lammps_parse_env
#       input_files:
#         lammps_atoms_file:
#           from_inputs: [box, atoms]
#         lammps_input_script:
#           from_inputs: [empirical_potential]
#       outputs:
#         optimised_atoms:
#           from_files: [lammps_dump_files]
#       commands:
#         - command: <<executable:lammps>>
#           stdin: <<lammps_input_script>>

# - objective: generate_microstructure_seeds
#   inputs:
#     - parameter: num_seeds
#   outputs:
#     - parameter: microstructure_seeds
#   actions:
#     - environments:
#         - scope:
#             type: any
#           environment: damask_parse_env
#       commands:
#         - command: <<executable:python_script>> <<script>> ??

# - version: v2
#   objective: prepare_atoms_box
#   inputs:
#     - parameter: number_atoms
#   outputs:
#     - parameter: box
#     - parameter: atoms
#   actions:
#     - environments:
#         - scope:
#             type: main
#           environment:
#             name: lammps_parse_env
#             # lammps_version: 1.2 # a specifier
#         - scope:
#             type: input_file_generator
#           environment: lammps_parse_env
#         - scope:
#             type: output_file_parser
#           environment: lammps_parse_env
#       commands:
#         - command: doSomething <<parameter:number_atoms>>
#       output_file_parsers:
#         box:
#           from_files: [t1_outfile_1]
#         atoms:
#           from_files: [t1_outfile_1]

# - version: v1
#   objective: prepare_atoms_box
#   inputs:
#     - parameter: number_atoms
#   outputs:
#     - parameter: box
#     - parameter: atoms
#   actions:
#     - environments:
#         - scope:
#             type: main
#           environment: lammps_parse_env
#         - scope:
#             type: input_file_generator
#           environment: lammps_parse_env
#         - scope:
#             type: output_file_parser
#           environment: lammps_parse_env
#       commands:
#         - command: doSomething <<parameter:number_atoms>>
#       output_file_parsers:
#         box:
#           from_files: [t1_outfile_1]
#         atoms:
#           from_files: [t1_outfile_1]

# - objective: optimise_atoms
#   method: empirical_potential
#   inputs:
#     - parameter: box
#     - parameter: atoms
#     - parameter: empirical_potential
#   outputs:
#     - parameter: optimised_atoms
#   actions:
#     - environments:
#         - scope:
#             type: main
#           environment:
#             name: lammps_env
#             # lammps_version: 1.2
#         - scope:
#             type: processing
#           environment: lammps_parse_env
#       input_file_generators:
#         lammps_atoms_file:
#           from_inputs: [box, atoms]
#         lammps_input_script:
#           from_inputs: [empirical_potential]
#       output_file_parsers:
#         optimised_atoms:
#           from_files: [lammps_dump_files]
#       commands:
#         - command: <<executable:lammps>>
#           stdin: <<lammps_input_script>>
# - objective: simulate_RVE_loading
#   method: CP_FFT
#   inputs:
#     - parameter: material
#     - parameter: load_case
#     - paramater: RVE
#   outputs:
#     - parameter: RVE_response
#   actions:
#     - environments:
#         - scope:
#             type: any
#           environment:
#             name: damask_env
#       input_file_generators:
#         damask_load_file:
#           from_inputs: [load_case]
#         damask_material_file:
#           from_inputs: [material]
#         damask_geom_file:
#           from_inputs: [material, RVE]
#       output_file_parsers:
#         RVE_response:
#           from_files: [damask_hdf5_file, damask_stdout]
#       commands:
#         - command: DAMASK_grid --load <<input_file:damask_load_file>> --geom <<input_file:damask_geom_file>>

- objective: generate_volume_element
  method: from_statistics
  inputs:
    - parameter: grid_size
    - parameter: phase_statistics
    - parameter: resolution
      default_value: null
    - parameter: size
      default_value: null
    - parameter: origin
      default_value: null
    - parameter: periodic
      default_value: true
    - parameter: precipitates
      default_value: null
    - parameter: orientations
      default_value: null
  outputs:
    - parameter: volume_element
  actions:
    - environments:
        - scope:
            type: any
          environment: dream_3D_env
      input_file_generators:
        - input_file: dream_3D_pipeline
          from_inputs:
            - grid_size
            - resolution
            - size
            - origin
            - periodic
            - phase_statistics
            - precipitates
            - orientations
          script: <<script:dream_3D/generate_volume_element_statistics.py>>
      commands:
        - command: <<executable:dream_3D_runner>> --pipeline ${PWD}/pipeline.json
      output_file_parsers:
        volume_element:
          from_files: [dream_3D_hdf5_file]
          save_files: [dream_3D_hdf5_file, dream_3D_XDMF_file]
          script: <<script:dream_3D/parse_dream_3D_volume_element.py>>

- objective: generate_volume_element
  method: extrusion
  inputs:
    - parameter: microstructure_image
    - parameter: depth
    - parameter: image_axes
    - parameter: homog_label
    - parameter: phase_label
      default_value: null
    - parameter: phase_label_mapping
      default_value: null
  outputs:
    - parameter: volume_element
  actions:
    - environments:
        - scope:
            type: any
          environment: damask_parse_env
      script: <<script:damask/generate_volume_element_extrusion.py>>
      script_data_in: direct
      script_data_out: direct
      script_exe: python_script

- objective: load_microstructure
  method: EBSD_DIC
  inputs:
    - parameter: DIC
    - parameter: EBSD
    - parameter: root_path
    - parameter: transform_type
      default_value: affine
    - parameter: scaling_factor
      default_value: 1
    - parameter: find_grains_algorithm
      default_value: warp
  outputs:
    - parameter: microstructure_image
  actions:
    - environments:
        - scope:
            type: any
          environment: defdap_env
      script: <<script:defdap/load_microstructure_EBSD_DIC.py>>
      script_data_in: direct
      script_data_out: direct
      script_exe: python_script

- objective: load_microstructure
  method: EBSD
  inputs:
    - parameter: EBSD
    - parameter: root_path
    - parameter: scaling_factor
      default_value: 1
  outputs:
    - parameter: microstructure_image
  actions:
    - environments:
        - scope:
            type: any
          environment: defdap_env
      script: <<script:defdap/load_microstructure_EBSD.py>>
      script_data_in: direct
      script_data_out: direct
      script_exe: python_script

- objective: modify_VE
  method: add_buffer_zones
  inputs:
    - parameter: volume_element
    - parameter: buffer_sizes # size of buffer on each face [-x, +x, -y, +y, -z, +z]
    - parameter: phase_ids # phase of each buffer. Relative so 1 is the first new phase and so on
    - parameter: phase_labels # labels of the new phases
    - parameter: homog_label # label of the homog type
    - parameter: order # order to add the zones, default [x, y, z]
      default_value: null
  outputs:
    - parameter: volume_element
  actions:
    - environments:
        - scope:
            type: any
          environment: damask_parse_env
      script: <<script:damask/add_VE_buffer_zones.py>>
      script_data_in: direct
      script_data_out: direct
      script_exe: python_script

- objective: modify_VE
  method: grid_size
  inputs:
    - parameter: volume_element
    - parameter: new_grid_size
  outputs:
    - parameter: volume_element
  actions:
    - environments:
        - scope:
            type: any
          environment: damask_parse_env
      script: <<script:damask/modify_VE_grid_size.py>>
      script_data_in: direct
      script_data_out: direct
      script_exe: python_script

- objective: sample_orientations
  method: from_CTF_file
  implementation: mtex
  inputs:
    - parameter: compile
      default_value: false
      propagation_mode: explicit
    - parameter: CTF_file_path
    - parameter: specimen_symmetry
    - parameter: EBSD_phase
    - parameter: num_orientations
    - parameter: EBSD_reference_frame_transformation
      default_value: euler_to_spatial # or "spatial_to_euler" or null
    - parameter: EBSD_rotation # dict with keys "euler_angles_deg" list optional "keep_XY" bool, or "keep_euler" bool
      default_value: null
  outputs:
    - parameter: orientations
  actions:
    - script: <<script:mtex/sample_orientations_CTF.m>>
      script_exe: compile_mtex
      environments:
        - scope:
            type: any
          environment: matlab_env
      rules:
        - path: inputs.compile
          condition:
            value.equal_to: true

    - script: sample_orientations_CTF
      script_data_in: json
      script_data_out: hdf5
      script_exe: run_compiled_mtex
      environments:
        - scope:
            type: any
          environment: matlab_env
      rules:
        - path: inputs.compile
          condition:
            value.equal_to: true

    - script: <<script:mtex/sample_orientations_CTF.m>>
      script_data_in: json
      script_data_out: hdf5
      script_exe: run_mtex
      environments:
        - scope:
            type: any
          environment: matlab_env
      rules:
        - path: inputs.compile
          condition:
            value.equal_to: false

- objective: sample_orientations
  method: from_CRC_file
  implementation: mtex
  inputs:
    - parameter: compile
      default_value: false
      propagation_mode: explicit
    - parameter: CRC_file_path
    - parameter: specimen_symmetry
    - parameter: EBSD_phase
    - parameter: num_orientations
    - parameter: EBSD_reference_frame_transformation
      default_value: euler_to_spatial # or "spatial_to_euler" or null
    - parameter: EBSD_rotation # dict with keys "euler_angles_deg" list optional "keep_XY" bool, or "keep_euler" bool
      default_value: null
  outputs:
    - parameter: orientations
  actions:
    - script: <<script:mtex/sample_orientations_CRC.m>>
      script_exe: compile_mtex
      environments:
        - scope:
            type: any
          environment: matlab_env
      rules:
        - path: inputs.compile
          condition:
            value.equal_to: true

    - script: sample_orientations_CRC
      script_data_in: json
      script_data_out: hdf5
      script_exe: run_compiled_mtex
      environments:
        - scope:
            type: any
          environment: matlab_env
      rules:
        - path: inputs.compile
          condition:
            value.equal_to: true

    - script: <<script:mtex/sample_orientations_CRC.m>>
      script_data_in: json
      script_data_out: hdf5
      script_exe: run_mtex
      environments:
        - scope:
            type: any
          environment: matlab_env
      rules:
        - path: inputs.compile
          condition:
            value.equal_to: false

- objective: sample_texture
  method: random
  implementation: mtex
  inputs:
    - parameter: compile
      default_value: false
      propagation_mode: explicit
    - parameter: specimen_symmetry
    - parameter: num_orientations
    - parameter: crystal_symmetry
  outputs:
    - parameter: orientations
  actions:
    - script: <<script:mtex/sample_texture_random.m>>
      script_exe: compile_mtex
      environments:
        - scope:
            type: any
          environment: matlab_env
      rules:
        - path: inputs.compile
          condition:
            value.equal_to: true

    - script: sample_texture_random
      script_data_in: json
      script_data_out: hdf5
      script_exe: run_compiled_mtex
      environments:
        - scope:
            type: any
          environment: matlab_env
      rules:
        - path: inputs.compile
          condition:
            value.equal_to: true

    - script: <<script:mtex/sample_texture_random.m>>
      script_data_in: json
      script_data_out: hdf5
      script_exe: run_mtex
      environments:
        - scope:
            type: any
          environment: matlab_env
      rules:
        - path: inputs.compile
          condition:
            value.equal_to: false
