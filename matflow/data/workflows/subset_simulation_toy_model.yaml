template_components:
  task_schemas:
    - objective: sample_direct_MC
      inputs:
        - parameter: dimension
      outputs:
        - parameter: x
      actions:
        - script: <<script:uq/sample_direct_MC.py>>
          script_data_in: direct
          script_data_out: direct
          script_exe: python_script
          environments:
            - scope:
                type: any
              environment: python_env

    - objective: system_analysis_toy_model
      inputs:
        - parameter: x
        - parameter: target_pf
        - parameter: dimension
      outputs:
        - parameter: g
      actions:
        - script: <<script:uq/system_analysis_toy_model.py>>
          script_data_in: direct
          script_data_out: direct
          script_exe: python_script
          environments:
            - scope:
                type: any
              environment: python_env

    - objective: collate_results
      inputs:
        - parameter: g
          group: all
        - parameter: x
          group: all
        - parameter: all_g
          group: all
          default_value: null
        - parameter: all_x
          group: all
          default_value: null
        - parameter: all_accept
          group: all
          default_value: null
        - parameter: p_0
      outputs:
        - parameter: chain_seeds
        - parameter: chain_g
        - parameter: threshold
        - parameter: num_chains
        - parameter: num_failed
        - parameter: level_pf
        - parameter: level_cov
        - parameter: pf
        - parameter: is_finished
        - parameter: accept_rate
      actions:
        - script: <<script:uq/collate_results.py>>
          script_data_in:
            g: { format: direct, all_iterations: true }
            "*": direct
          script_data_out: direct
          script_exe: python_script
          environments:
            - scope:
                type: any
              environment: python_env

    - objective: initialise_markov_chains
      inputs:
        - parameter: chain_index
        - parameter: chain_seeds
        - parameter: chain_g
      outputs:
        - parameter: x
        - parameter: g
        - parameter: all_x
        - parameter: all_g
        - parameter: all_accept
      actions:
        - script: <<script:uq/initialise_markov_chains.py>>
          script_data_in: direct
          script_data_out: direct
          script_exe: python_script
          environments:
            - scope:
                type: any
              environment: python_env

    - objective: generate_next_state
      inputs:
        - parameter: x
        - parameter: prop_std
      outputs:
        - parameter: x
      actions:
        - script: <<script:uq/generate_next_state.py>>
          script_data_in: direct
          script_data_out: direct
          script_exe: python_script
          environments:
            - scope:
                type: any
              environment: python_env

    - objective: increment_chain
      inputs:
        - parameter: x
        - parameter: g
        - parameter: all_x
        - parameter: all_g
        - parameter: all_accept
        - parameter: threshold
      outputs:
        - parameter: x
        - parameter: g
        - parameter: all_x
        - parameter: all_g
        - parameter: all_accept
      actions:
        - script: <<script:uq/increment_chain.py>>
          script_data_in: direct
          script_data_out: direct
          script_exe: python_script
          environments:
            - scope:
                type: any
              environment: python_env

loops:
  - name: markov_chain_state # [inner loop]
    tasks: [4, 5, 6]
    num_iterations: 9 # num_states - 1: (1 / p_0) - 1
  - name: levels # [outer loop]
    tasks: [2, 3, 4, 5, 6]
    num_iterations: 8
    termination_task: 2
    termination:
      path: outputs.is_finished
      condition: { value.equal_to: true }

resources:
  any:
    combine_scripts: true

tasks:
  - schema: sample_direct_MC
    inputs:
      dimension: 200
    repeats: 100 # num_samples
  - schema: system_analysis_toy_model
    inputs:
      dimension: 200
      target_pf: 1.0e-4
    groups:
      - name: all
  - schema: collate_results # [outer loop]
    inputs:
      p_0: 0.1
  - schema: initialise_markov_chains # [outer loop]
    sequences:
      - path: inputs.chain_index
        values::from_range:
          start: 0
          stop: 10 # num_chains: num_samples * p_0
          step: 1
  - schema: generate_next_state # [inner loop]
    inputs:
      prop_std: 0.5
  - schema: system_analysis_toy_model # [inner loop]
    inputs:
      dimension: 200
      target_pf: 1.0e-4
  - schema: increment_chain # [inner loop]
    groups:
      - name: all
